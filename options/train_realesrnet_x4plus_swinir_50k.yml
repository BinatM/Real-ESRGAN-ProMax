# SwinIR RealESRNet x4plus - 50K iterations - Optimized for minimal storage
# Enhanced architecture for your project goals
name: train_RealESRNet_SwinIR_x4plus_50K
model_type: RealESRNetModel
scale: 4
num_gpu: auto
manual_seed: 0

# USM the ground-truth
gt_usm: True

# the first degradation process
resize_prob: [0.2, 0.7, 0.1]  # up, down, keep
resize_range: [0.15, 1.5]
gaussian_noise_prob: 0.5
noise_range: [1, 30]
poisson_scale_range: [0.05, 3]
gray_noise_prob: 0.4
jpeg_range: [30, 95]

# the second degradation process
second_blur_prob: 0.8
resize_prob2: [0.3, 0.4, 0.3]  # up, down, keep
resize_range2: [0.3, 1.2]
gaussian_noise_prob2: 0.5
noise_range2: [1, 25]
poisson_scale_range2: [0.05, 2.5]
gray_noise_prob2: 0.4
jpeg_range2: [30, 95]

gt_size: 256
queue_size: 180

# dataset and data loader settings
datasets:
  train:
    name: DIV2K
    type: RealESRGANDataset
    dataroot_gt: "./DIV2K_dataset"
    meta_info: "./DIV2K_dataset/meta_info/meta_info_DIV2Kmultiscale.txt"
    io_backend:
      type: disk

    blur_kernel_size: 21
    kernel_list: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
    kernel_prob: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
    sinc_prob: 0.1
    blur_sigma: [0.2, 3]
    betag_range: [0.5, 4]
    betap_range: [1, 2]

    blur_kernel_size2: 21
    kernel_list2: ['iso', 'aniso', 'generalized_iso', 'generalized_aniso', 'plateau_iso', 'plateau_aniso']
    kernel_prob2: [0.45, 0.25, 0.12, 0.03, 0.12, 0.03]
    sinc_prob2: 0.1
    blur_sigma2: [0.2, 1.5]
    betag_range2: [0.5, 4]
    betap_range2: [1, 2]

    final_sinc_prob: 0.8

    gt_size: 256
    use_hflip: True
    use_rot: False

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 0
    batch_size_per_gpu: 2
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

# network structures - MAIN CHANGE: Using SwinIR instead of RRDBNet
network_g:
  type: SwinIR
  upscale: 4
  in_chans: 3
  img_size: 64    # Input patch size
  window_size: 8
  img_range: 1.0
  depths: [6, 6, 6, 6, 6, 6]  # Number of transformer blocks in each layer
  embed_dim: 96   # Feature dimension
  num_heads: [6, 6, 6, 6, 6, 6]  # Number of attention heads
  mlp_ratio: 2
  upsampler: 'pixelshuffle'  # For super-resolution
  resi_connection: '1conv'   # Residual connection type

# path
path:
  # Start training from scratch - no pretrained model
  pretrain_network_g: ~
  param_key_g: params_ema
  strict_load_g: false
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 2e-4  # Learning rate for SwinIR
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: MultiStepLR
    milestones: [40000]  # Reduce LR at 40K for 50K training
    gamma: 0.5

  total_iter: 50000    # 50K iterations for good results
  warmup_iter: -1      # no warm up

  # Step 1: Only pixel loss (like RealESRNet)
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

# logging settings - OPTIMIZED FOR MINIMAL STORAGE
logger:
  print_freq: 500      # Less frequent logging for longer training
  save_checkpoint_freq: 10000  # Only 5 checkpoints total (10K, 20K, 30K, 40K, 50K)
  use_tb_logger: false
  wandb:
    project: realesrgan-swinir-enhancement
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500

find_unused_parameters: true  # Important for SwinIR training
use_fp16: true  # Mixed precision for efficiency